generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  phone          String?
  fullName       String
  role           UserRole        @default(MANAGER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  createdById    String?
  managedClients ClientManager[]
  refreshTokens  RefreshToken[]
  createdBy      User?           @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers   User[]          @relation("UserCreatedBy")

  @@map("users")
}

model Client {
  id           String          @id @default(cuid())
  fullName     String
  dni          String?         @unique
  cuit         String?         @unique
  phone        String?
  email        String?
  address      String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  job          String?
  managers     ClientManager[]
  loans        Loan[]
  transactions Transaction[]

  @@map("clients")
}

model ClientManager {
  id        String    @id @default(cuid())
  clientId  String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientId, userId])
  @@map("client_managers")
}

model Loan {
  id                  String           @id @default(cuid())
  clientId            String
  amount              Decimal          @db.Decimal(40, 2)
  status              LoanStatus       @default(PENDING)
  requestDate         DateTime         @default(now())
  approvedDate        DateTime?
  completedDate       DateTime?
  description         String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
  baseInterestRate    Decimal          @db.Decimal(5, 2)
  currency            Currency         @default(ARS)
  firstDueDate        DateTime?
  notes               String?
  paymentDay          PaymentDay?
  paymentFrequency    PaymentFrequency
  penaltyInterestRate Decimal          @db.Decimal(5, 2)
  totalPayments       Int
  loanTrack           String           @unique
  
  // Campos para secuencia at√≥mica
  prefix              String
  year                Int
  sequence            Int
  
  originalAmount      Decimal          @db.Decimal(40, 2)
  client              Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  subLoans            SubLoan[]
  transactions        Transaction[]

  @@unique([prefix, year, sequence])
  @@map("loans")
}

model SubLoan {
  id            String        @id @default(cuid())
  loanId        String
  paymentNumber Int
  amount        Decimal       @db.Decimal(40, 2)
  totalAmount   Decimal       @db.Decimal(40, 2)
  status        SubLoanStatus @default(PENDING)
  dueDate       DateTime
  paidDate      DateTime?
  paidAmount    Decimal       @default(0) @db.Decimal(40, 2)
  daysOverdue   Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  loan          Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@unique([loanId, paymentNumber])
  @@map("sub_loans")
}

model Transaction {
  id              String          @id @default(cuid())
  loanId          String?
  clientId        String?
  type            TransactionType
  amount          Decimal         @db.Decimal(40, 2)
  currency        Currency        @default(ARS)
  description     String
  transactionDate DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  subLoanId       String?
  client          Client?         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  loan            Loan?           @relation(fields: [loanId], references: [id], onDelete: Cascade)
  subLoan         SubLoan?        @relation(fields: [subLoanId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model ExternalApiResponse {
  id                 String   @id @default(cuid())
  compra             Decimal  @db.Decimal(20, 2)
  venta              Decimal  @db.Decimal(20, 2)
  casa               String
  nombre             String
  moneda             String
  fechaActualizacion String
  apiUrl             String
  status             String   @default("SUCCESS")
  responseTime       Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("external_api_responses")
}

model SystemConfig {
  id          String    @id @default(cuid())
  key         ConfigKey @unique
  value       Int
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("system_config")
}

model LoanSequence {
  prefix String
  year   Int
  next   Int @default(1)
  
  @@id([prefix, year])
  @@map("loan_sequences")
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  SUBADMIN
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
  DEFAULTED
}

enum ConfigKey {
  ADMIN_MAX_SUBADMINS
  SUBADMIN_MAX_MANAGERS
}

enum Currency {
  ARS
  USD
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum PaymentDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SubLoanStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

enum TransactionType {
  INCOME
  EXPENSE
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  phone              String?
  fullName           String
  role               UserRole            @default(MANAGER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  createdById        String?
  clientQuota        Int                 @default(0)
  usedClientQuota    Int                 @default(0)
  managedClients     ClientManager[]
  refreshTokens      RefreshToken[]
  wallet             Wallet?
  dailyClosures      DailyClosure[]
  walletTransactions WalletTransaction[]
  createdBy          User?               @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers       User[]              @relation("UserCreatedBy")

  @@map("users")
}

model Client {
  id           String          @id @default(cuid())
  fullName     String
  dni          String?         @unique
  cuit         String?         @unique
  phone        String?
  email        String?
  address      String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  job          String?
  managers     ClientManager[]
  loans        Loan[]
  transactions Transaction[]

  @@map("clients")
}

model ClientManager {
  id        String    @id @default(cuid())
  clientId  String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientId, userId])
  @@map("client_managers")
}

model Loan {
  id                  String           @id @default(cuid())
  clientId            String
  managerId           String?
  amount              Decimal          @db.Decimal(40, 2)
  status              LoanStatus       @default(PENDING)
  requestDate         DateTime         @default(now())
  approvedDate        DateTime?
  completedDate       DateTime?
  description         String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
  baseInterestRate    Decimal          @db.Decimal(5, 2)
  currency            Currency         @default(ARS)
  firstDueDate        DateTime?
  notes               String?
  paymentDay          PaymentDay?
  paymentFrequency    PaymentFrequency
  penaltyInterestRate Decimal          @db.Decimal(5, 2)
  totalPayments       Int
  loanTrack           String           @unique

  // Campos para secuencia at√≥mica
  prefix   String
  year     Int
  sequence Int

  originalAmount Decimal       @db.Decimal(40, 2)
  client         Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  subLoans       SubLoan[]
  transactions   Transaction[]

  @@unique([prefix, year, sequence])
  @@map("loans")
}

model SubLoan {
  id             String        @id @default(cuid())
  loanId         String
  paymentNumber  Int
  amount         Decimal       @db.Decimal(40, 2)
  totalAmount    Decimal       @db.Decimal(40, 2)
  status         SubLoanStatus @default(PENDING)
  dueDate        DateTime
  paidDate       DateTime?
  paidAmount     Decimal       @default(0) @db.Decimal(40, 2)
  daysOverdue    Int           @default(0)
  paymentHistory Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  loan           Loan          @relation(fields: [loanId], references: [id], onDelete: Cascade)
  transactions   Transaction[]
  payments       Payment[]

  @@unique([loanId, paymentNumber])
  @@map("sub_loans")
}

model Transaction {
  id              String          @id @default(cuid())
  loanId          String?
  clientId        String?
  type            TransactionType
  amount          Decimal         @db.Decimal(40, 2)
  currency        Currency        @default(ARS)
  description     String
  transactionDate DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  subLoanId       String?
  client          Client?         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  loan            Loan?           @relation(fields: [loanId], references: [id], onDelete: Cascade)
  subLoan         SubLoan?        @relation(fields: [subLoanId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model ExternalApiResponse {
  id                 String   @id @default(cuid())
  compra             Decimal  @db.Decimal(20, 2)
  venta              Decimal  @db.Decimal(20, 2)
  casa               String
  nombre             String
  moneda             String
  fechaActualizacion String
  apiUrl             String
  status             String   @default("SUCCESS")
  responseTime       Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("external_api_responses")
}

model SystemConfig {
  id          String    @id @default(cuid())
  key         ConfigKey @unique
  value       Int
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("system_config")
}

model LoanSequence {
  prefix String
  year   Int
  next   Int    @default(1)

  @@id([prefix, year])
  @@map("loan_sequences")
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  SUBADMIN
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
  DEFAULTED
}

enum ConfigKey {
  ADMIN_MAX_SUBADMINS
  SUBADMIN_MAX_MANAGERS
  ADMIN_MAX_CLIENTS
}

enum Currency {
  ARS
  USD
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum PaymentDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SubLoanStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Wallet {
  id           String              @id @default(cuid())
  userId       String              @unique
  balance      Decimal             @default(0) @db.Decimal(40, 2)
  currency     Currency            @default(ARS)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id            String                @id @default(cuid())
  walletId      String
  userId        String
  type          WalletTransactionType
  amount        Decimal               @db.Decimal(40, 2)
  currency      Currency              @default(ARS)
  description   String
  relatedUserId String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  wallet        Wallet                @relation(fields: [walletId], references: [id], onDelete: Cascade)
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

model Payment {
  id          String   @id @default(cuid())
  subLoanId   String
  amount      Decimal  @db.Decimal(40, 2)
  currency    Currency @default(ARS)
  paymentDate DateTime @default(now())
  description String?
  createdAt   DateTime @default(now())
  subLoan     SubLoan  @relation(fields: [subLoanId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model DailyClosure {
  id             String    @id @default(cuid())
  userId         String
  closureDate    DateTime
  totalCollected Decimal   @default(0) @db.Decimal(40, 2)
  totalExpenses  Decimal   @default(0) @db.Decimal(40, 2)
  netAmount      Decimal   @default(0) @db.Decimal(40, 2)
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses       Expense[]

  @@unique([userId, closureDate])
  @@map("daily_closures")
}

model Expense {
  id             String          @id @default(cuid())
  dailyClosureId String
  category       ExpenseCategory
  amount         Decimal         @db.Decimal(40, 2)
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  dailyClosure   DailyClosure    @relation(fields: [dailyClosureId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

enum WalletTransactionType {
  DEPOSIT
  WITHDRAWAL
  LOAN_DISBURSEMENT
  LOAN_PAYMENT
  TRANSFER_TO_MANAGER
  TRANSFER_FROM_SUBADMIN
}

enum ExpenseCategory {
  COMBUSTIBLE
  CONSUMO
  REPARACIONES
  OTROS
}
